package system

/*
The post-processing of data consists in plotting the CSV files generated by the
demo functions. We make the choice here to use the python library matplotlib,
then by executing python code throw external python sub-process. The python
function are predefined in the module plot.py (package plotter locate at root
path of the ode module), we just have here to specify the function of plot.py to
execute.

Then, the execution of the plot requires that the PYTHONPATH contains the path
to the package plotter containing the module plot.py (locate at root
path of the ode module).

*/
import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
)

func python(pyline string) error {
	log.Printf("Running python line %s ...", pyline)
	pyargs := fmt.Sprintf("import plot; %s", pyline)
	cmd := exec.Command("python", "-c", pyargs)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err := cmd.Start()
	if err != nil {
		return err
	}
	log.Printf("Waiting for command to finish ...")
	return cmd.Wait()
}

type PyScriptHandler interface {
	Create(filepath string, content []string) error
	Execute(filepath string) error
}

type pyPlotter struct {
	header []string
}

func (plotter pyPlotter) Create(filepath string, content []string) error {
	file, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer file.Close()
	log.Printf("Creating the script %s for plotting results (requires python matplotlib library)", filepath)
	for index := range plotter.header {
		file.WriteString(fmt.Sprintf("%s\n", plotter.header[index]))
	}
	for index := range content {
		file.WriteString(fmt.Sprintf("%s\n", content[index]))
	}
	return nil
}

func (plotter pyPlotter) Execute(filepath string) error {
	cmd := exec.Command("python3", filepath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err := cmd.Start()
	if err != nil {
		return err
	}
	log.Printf("Waiting for command to finish ...")
	return cmd.Wait()
}

func NewPlotter() PyScriptHandler {
	var plotter pyPlotter
	plotter.header = []string{
		"# coding: utf-8",
		"# THIS SCRIPT IS GENERATING BY THE SYSTEM/ODE FOR PLOTTING THE RESULTS",
		"from plotter import plot",
	}
	return plotter
}

// pystring returns a python formated string of a list of strings
func pystring(lstr []string) string {
	pystr := fmt.Sprintf("['%s']", strings.Join(lstr, "','"))
	return pystr
}

func pybool(b bool) string {
	if b {
		return "True"
	}
	return "False"
}
