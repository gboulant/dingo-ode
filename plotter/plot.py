#!/usr/bin/env python3

"""
This script provides helper function to plot the data generated by the
demos programs of the package ode/demos. It uses the matplotlib
lybrary. The module is called from within the go function of the
demos using exec.Command.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# ---------------------------------------------------------------

def plot3D(x,y,z,lx="x0",ly="x1",lz="x2"):
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.plot(x,y,z)
    ax.set_xlabel(lx)
    ax.set_ylabel(ly)
    ax.set_zlabel(lz)
    plt.show()

def plot2D(x,y,lx="x0",ly="x1"):
    fig, ax = plt.subplots()
    ax.plot(x,y,'y-')
    ax.set_xlabel(lx)
    ax.set_ylabel(ly)
    plt.show()

def gtimeplot(t,values,names):
    fig, ax = plt.subplots()

    for value,name in zip(values,names):
        ax.plot(t, value,label=name)

    ax.set_xlabel("time")
    ax.set_ylabel("value")
    plt.legend()
    plt.show()

def mtimeplot(t,values,names):
    nbcurves = len(names)
    fig, ax = plt.subplots(nbcurves,1,sharex=True)

    i = 0
    for value,name in zip(values,names):
        ax[i].plot(t, value,label=name)
        ax[i].set_ylabel(name)
        i+=1

    ax[nbcurves-1].set_xlabel("time")
    plt.show()


# ---------------------------------------------------------------
def timeseries(csvpath,names,multi=False):
    data = np.genfromtxt(csvpath, delimiter=';', names=True)
    values=[data[name] for name in names]
    if multi:
        mtimeplot(data["t"],values,names)
    else:
        gtimeplot(data["t"],values,names)

def diagram2D(csvpath,xname,yname):
    data = np.genfromtxt(csvpath, delimiter=';', names=True)
    x=data[xname]
    y=data[yname]
    plot2D(x,y,xname,yname)

def diagram3D(csvpath,xname,yname,zname):
    data = np.genfromtxt(csvpath, delimiter=';', names=True)
    x=data[xname]
    y=data[yname]
    z=data[zname]
    plot3D(x,y,z,xname,yname,zname)

def firstReturnMap(csvpath,xname,yname):
    data = np.genfromtxt(csvpath, delimiter=';', names=True)
    x=data[xname]
    y=data[yname]

    fig, ax = plt.subplots()
    ax.plot(x,y, ',')
    ax.set_xlabel(xname)
    ax.set_ylabel(yname)
    plt.show()

# ---------------------------------------------------------------
import os
TESTFILES_DIR=os.path.join(os.path.dirname(__file__),"testfiles")

def TEST_2d():
    datafilepath = os.path.join(TESTFILES_DIR,"spring.csv")
    timeseries(csvpath = datafilepath, names = ['x','v'])
    diagram2D(csvpath  = datafilepath, xname = 'x', yname = 'v')

if __name__ == "__main__":
    TEST_2d()
